# Folders
mkdir -p .vscode .github/workflows src/app tests

# Minimal app
cat > src/app/__init__.py <<'PY'
__all__ = ["main"]
PY

cat > src/app/main.py <<'PY'
def main() -> None:
    print("hello from trapp python workspace")
PY

# Test
cat > tests/test_smoke.py <<'PY'
from app.main import main

def test_smoke(capsys):
    main()
    out, _ = capsys.readouterr()
    assert "hello from trapp" in out
PY

# VS Code settings
cat > .vscode/settings.json <<'JSON'
{
  "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
  "editor.formatOnSave": true,
  "python.testing.pytestEnabled": true,
  "python.testing.pytestArgs": ["tests"],
  "python.analysis.typeCheckingMode": "basic",
  "ruff.enable": true,
  "ruff.lint.run": "onType",
  "terminal.integrated.cwd": "${workspaceFolder}"
}
JSON

cat > .vscode/launch.json <<'JSON'
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Run app.main",
      "type": "python",
      "request": "launch",
      "module": "app.main",
      "justMyCode": true
    }
  ]
}
JSON

cat > .vscode/tasks.json <<'JSON'
{
  "version": "2.0.0",
  "tasks": [
    {"label": "Format", "type": "shell", "command": "ruff check --fix . && black ."},
    {"label": "Lint",   "type": "shell", "command": "ruff check ."},
    {"label": "Test",   "type": "shell", "command": "pytest -q"}
  ]
}
JSON

# Git ignore
cat > .gitignore <<'TXT'
.venv/
__pycache__/
.pytest_cache/
dist/
*.pyc
TXT

# Pre-commit
cat > .pre-commit-config.yaml <<'YAML'
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.8
    hooks:
      - id: ruff
        args: [--fix]
      - id: ruff-format
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile=black"]
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: end-of-file-fixer
      - id: trailing-whitespace
YAML

# pyproject.toml (tooling + packaging)
cat > pyproject.toml <<'TOML'
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "trapp-python"
version = "0.1.0"
description = "Victor's Ubuntu VM Python workspace"
readme = "README.md"
requires-python = ">=3.12"
dependencies = []

[project.scripts]
trapp-python = "app.main:main"

[project.optional-dependencies]
dev = ["pytest>=8.2", "ruff>=0.5", "black>=24.0", "isort>=5.13", "pre-commit>=3.7"]

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.isort]
profile = "black"

[tool.ruff]
line-length = 100
target-version = "py312"
select = ["E", "F", "I", "B", "UP"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q"
TOML

# README
cat > README.md <<'MD'
# trapp-python

Clean Python workspace on Ubuntu VM, used from VS Code Remote-SSH.

## Commands
- Run app: `python -m app.main`
- Tests: `pytest -q`
- Lint: `ruff check .`
- Format: `ruff check --fix . && black .`
MD

