cd /projects/python
test -d .git || { echo "Not at repo root (/projects/python)"; exit 1; }

# 1) Create target folders (idempotent)
mkdir -p python linux-scripts powershell ansible aws .github/workflows

# 2) Move the current Python project into python/ (only if not already there)
[ -d src ]               && [ ! -d python/src ]            && git mv src python/
[ -d tests ]             && [ ! -d python/tests ]          && git mv tests python/
[ -f pyproject.toml ]    && [ ! -f python/pyproject.toml ] && git mv pyproject.toml python/
[ -d .vscode ]           && [ ! -d python/.vscode ]        && git mv .vscode python/.vscode
# If you have a Python-specific README at root, move it under python/
[ -f README.md ]         && [ ! -f python/README.md ]      && git mv README.md python/README.md

# 3) Root README + .gitignore
cat > README.md <<'MD'
# Antunes-Lab

Personal lab **monorepo**.

- **python/** — Python package (src/ layout, tests, tooling)
- **linux-scripts/** — Bash utilities
- **powershell/** — Windows/PowerShell scripts
- **ansible/** — Playbooks, inventories, roles
- **aws/** — Terraform/IaC or Boto3 scripts (later)

Open `Antunes-Lab.code-workspace` in VS Code for a multi-folder view.
MD

cat > .gitignore <<'TXT'
# Global
.DS_Store
*.log
__pycache__/
*.pyc
.pytest_cache/

# Python venv(s)
.venv/
projects/
python/.venv/

# Build / node
dist/
build/
node_modules/
TXT

# 4) Root VS Code settings to use your venv "projects"
mkdir -p .vscode python/.vscode
cat > .vscode/settings.json <<'JSON'
{
  "python.defaultInterpreterPath": "${workspaceFolder}/projects/bin/python",
  "editor.formatOnSave": true,
  "python.testing.pytestEnabled": true,
  "python.testing.pytestArgs": ["python/tests"],
  "python.analysis.typeCheckingMode": "basic",
  "ruff.enable": true,
  "ruff.lint.run": "onType",
  "terminal.integrated.cwd": "${workspaceFolder}"
}
JSON

# Also set per-folder settings when you open just python/
cat > python/.vscode/settings.json <<'JSON'
{
  "python.defaultInterpreterPath": "${workspaceFolder}/../projects/bin/python",
  "editor.formatOnSave": true,
  "python.testing.pytestEnabled": true,
  "python.testing.pytestArgs": ["tests"],
  "python.analysis.typeCheckingMode": "basic",
  "ruff.enable": true,
  "ruff.lint.run": "onType"
}
JSON

# 5) Starter files so other areas exist (safe if you already have them)
mkdir -p ansible/playbooks
[ ! -f linux-scripts/sysinfo.sh ] && cat > linux-scripts/sysinfo.sh <<'SH'
#!/usr/bin/env bash
set -euo pipefail
echo "Hostname: $(hostname)"
echo "Kernel: $(uname -sr)"
echo "Uptime: $(uptime -p)"
SH
chmod +x linux-scripts/sysinfo.sh

[ ! -f powershell/Get-SysInfo.ps1 ] && cat > powershell/Get-SysInfo.ps1 <<'PS1'
Write-Output ("Hostname: {0}" -f $env:COMPUTERNAME)
Write-Output ("OS: {0}" -f (Get-CimInstance Win32_OperatingSystem).Caption)
PS1

[ ! -f ansible/inventory.yml ] && cat > ansible/inventory.yml <<'YML'
all:
  hosts:
    localhost:
      ansible_connection: local
YML

[ ! -f ansible/playbooks/ping.yml ] && cat > ansible/playbooks/ping.yml <<'YML'
- name: Ping localhost
  hosts: localhost
  gather_facts: false
  tasks:
    - ping:
YML

# 6) Nice multi-root workspace file
cat > Antunes-Lab.code-workspace <<'JSON'
{
  "folders": [
    { "path": "." },
    { "path": "python" },
    { "path": "linux-scripts" },
    { "path": "powershell" },
    { "path": "ansible" },
    { "path": "aws" }
  ],
  "settings": { "terminal.integrated.cwd": "${workspaceFolder}" }
}
JSON

# 7) Commit & push
git add -A
git commit -m "Reorganise to monorepo: python/, linux-scripts/, powershell/, ansible/, aws/"
git push -u origin main

